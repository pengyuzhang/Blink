
    /*
    ***************************************************************************
    *  Copyright 2007 Impinj, Inc.
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    *
    ***************************************************************************
    */


    /*
    ***************************************************************************
    *
    *  This code is generated by Impinj LLRP .Net generator. Modification is
    *  not recommended.
    *
    ***************************************************************************
    */

    /*
    ***************************************************************************
    * File Name:       LLRPEnum.cs
    *
    * Version          1.0
    * Author:          Impinj
    * Organization:    Impinj
    * Date:            Jan. 18, 2008
    *
    * Description:     This file contains LLRP enumeration definitions
    ***************************************************************************
    */


    using System;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;

    namespace LLRP
    {
    //LLRP Enumeration definitions

    
    /// <summary>
    /// This is the identifier of the air protocol. 
    /// </summary>
    [Serializable]
    public enum ENUM_AirProtocols
  {
    [XmlEnum(Name="Unspecified")]Unspecified = 0,
    [XmlEnum(Name="EPCGlobalClass1Gen2")]EPCGlobalClass1Gen2 = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_GetReaderCapabilitiesRequestedData
  {
    [XmlEnum(Name="All")]All = 0,
    [XmlEnum(Name="General_Device_Capabilities")]General_Device_Capabilities = 1,
    [XmlEnum(Name="LLRP_Capabilities")]LLRP_Capabilities = 2,
    [XmlEnum(Name="Regulatory_Capabilities")]Regulatory_Capabilities = 3,
    [XmlEnum(Name="LLRP_Air_Protocol_Capabilities")]LLRP_Air_Protocol_Capabilities = 4,
  }

    /// <summary>
    /// This field carries the enumerations of the communications standard.
    /// </summary>
    [Serializable]
    public enum ENUM_CommunicationsStandard
  {
    [XmlEnum(Name="Unspecified")]Unspecified = 0,
    [XmlEnum(Name="US_FCC_Part_15")]US_FCC_Part_15 = 1,
    [XmlEnum(Name="ETSI_302_208")]ETSI_302_208 = 2,
    [XmlEnum(Name="ETSI_300_220")]ETSI_300_220 = 3,
    [XmlEnum(Name="Australia_LIPD_1W")]Australia_LIPD_1W = 4,
    [XmlEnum(Name="Australia_LIPD_4W")]Australia_LIPD_4W = 5,
    [XmlEnum(Name="Japan_ARIB_STD_T89")]Japan_ARIB_STD_T89 = 6,
    [XmlEnum(Name="Hong_Kong_OFTA_1049")]Hong_Kong_OFTA_1049 = 7,
    [XmlEnum(Name="Taiwan_DGT_LP0002")]Taiwan_DGT_LP0002 = 8,
    [XmlEnum(Name="Korea_MIC_Article_5_2")]Korea_MIC_Article_5_2 = 9,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_ROSpecState
  {
    [XmlEnum(Name="Disabled")]Disabled = 0,
    [XmlEnum(Name="Inactive")]Inactive = 1,
    [XmlEnum(Name="Active")]Active = 2,
  }

    /// <summary>
    /// Description
    /// </summary>
    [Serializable]
    public enum ENUM_ROSpecStartTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Immediate")]Immediate = 1,
    [XmlEnum(Name="Periodic")]Periodic = 2,
    [XmlEnum(Name="GPI")]GPI = 3,
  }

    /// <summary>
    /// Description
    /// </summary>
    [Serializable]
    public enum ENUM_ROSpecStopTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Duration")]Duration = 1,
    [XmlEnum(Name="GPI_With_Timeout")]GPI_With_Timeout = 2,
  }

    /// <summary>
    /// Description:
    /// </summary>
    [Serializable]
    public enum ENUM_AISpecStopTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Duration")]Duration = 1,
    [XmlEnum(Name="GPI_With_Timeout")]GPI_With_Timeout = 2,
    [XmlEnum(Name="Tag_Observation")]Tag_Observation = 3,
  }

    /// <summary>
    /// Description:
    /// </summary>
    [Serializable]
    public enum ENUM_TagObservationTriggerType
  {
    [XmlEnum(Name="Upon_Seeing_N_Tags_Or_Timeout")]Upon_Seeing_N_Tags_Or_Timeout = 0,
    [XmlEnum(Name="Upon_Seeing_No_More_New_Tags_For_Tms_Or_Timeout")]Upon_Seeing_No_More_New_Tags_For_Tms_Or_Timeout = 1,
    [XmlEnum(Name="N_Attempts_To_See_All_Tags_In_FOV_Or_Timeout")]N_Attempts_To_See_All_Tags_In_FOV_Or_Timeout = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_RFSurveySpecStopTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Duration")]Duration = 1,
    [XmlEnum(Name="N_Iterations_Through_Frequency_Range")]N_Iterations_Through_Frequency_Range = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_AccessSpecState
  {
    [XmlEnum(Name="Disabled")]Disabled = 0,
    [XmlEnum(Name="Active")]Active = 1,
  }

    /// <summary>
    /// Description:
    /// </summary>
    [Serializable]
    public enum ENUM_AccessSpecStopTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Operation_Count")]Operation_Count = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_GetReaderConfigRequestedData
  {
    [XmlEnum(Name="All")]All = 0,
    [XmlEnum(Name="Identification")]Identification = 1,
    [XmlEnum(Name="AntennaProperties")]AntennaProperties = 2,
    [XmlEnum(Name="AntennaConfiguration")]AntennaConfiguration = 3,
    [XmlEnum(Name="ROReportSpec")]ROReportSpec = 4,
    [XmlEnum(Name="ReaderEventNotificationSpec")]ReaderEventNotificationSpec = 5,
    [XmlEnum(Name="AccessReportSpec")]AccessReportSpec = 6,
    [XmlEnum(Name="LLRPConfigurationStateValue")]LLRPConfigurationStateValue = 7,
    [XmlEnum(Name="KeepaliveSpec")]KeepaliveSpec = 8,
    [XmlEnum(Name="GPIPortCurrentState")]GPIPortCurrentState = 9,
    [XmlEnum(Name="GPOWriteData")]GPOWriteData = 10,
    [XmlEnum(Name="EventsAndReports")]EventsAndReports = 11,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_IdentificationType
  {
    [XmlEnum(Name="MAC_Address")]MAC_Address = 0,
    [XmlEnum(Name="EPC")]EPC = 1,
  }

    /// <summary>
    /// Description:
    /// </summary>
    [Serializable]
    public enum ENUM_KeepaliveTriggerType
  {
    [XmlEnum(Name="Null")]Null = 0,
    [XmlEnum(Name="Periodic")]Periodic = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_GPIPortState
  {
    [XmlEnum(Name="Low")]Low = 0,
    [XmlEnum(Name="High")]High = 1,
    [XmlEnum(Name="Unknown")]Unknown = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_ROReportTriggerType
  {
    [XmlEnum(Name="None")]None = 0,
    [XmlEnum(Name="Upon_N_Tags_Or_End_Of_AISpec")]Upon_N_Tags_Or_End_Of_AISpec = 1,
    [XmlEnum(Name="Upon_N_Tags_Or_End_Of_ROSpec")]Upon_N_Tags_Or_End_Of_ROSpec = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_AccessReportTriggerType
  {
    [XmlEnum(Name="Whenever_ROReport_Is_Generated")]Whenever_ROReport_Is_Generated = 0,
    [XmlEnum(Name="End_Of_AccessSpec")]End_Of_AccessSpec = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_NotificationEventType
  {
    [XmlEnum(Name="Upon_Hopping_To_Next_Channel")]Upon_Hopping_To_Next_Channel = 0,
    [XmlEnum(Name="GPI_Event")]GPI_Event = 1,
    [XmlEnum(Name="ROSpec_Event")]ROSpec_Event = 2,
    [XmlEnum(Name="Report_Buffer_Fill_Warning")]Report_Buffer_Fill_Warning = 3,
    [XmlEnum(Name="Reader_Exception_Event")]Reader_Exception_Event = 4,
    [XmlEnum(Name="RFSurvey_Event")]RFSurvey_Event = 5,
    [XmlEnum(Name="AISpec_Event")]AISpec_Event = 6,
    [XmlEnum(Name="AISpec_Event_With_Details")]AISpec_Event_With_Details = 7,
    [XmlEnum(Name="Antenna_Event")]Antenna_Event = 8,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_ROSpecEventType
  {
    [XmlEnum(Name="Start_Of_ROSpec")]Start_Of_ROSpec = 0,
    [XmlEnum(Name="End_Of_ROSpec")]End_Of_ROSpec = 1,
    [XmlEnum(Name="Preemption_Of_ROSpec")]Preemption_Of_ROSpec = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_RFSurveyEventType
  {
    [XmlEnum(Name="Start_Of_RFSurvey")]Start_Of_RFSurvey = 0,
    [XmlEnum(Name="End_Of_RFSurvey")]End_Of_RFSurvey = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_AISpecEventType
  {
    [XmlEnum(Name="End_Of_AISpec")]End_Of_AISpec = 0,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_AntennaEventType
  {
    [XmlEnum(Name="Antenna_Disconnected")]Antenna_Disconnected = 0,
    [XmlEnum(Name="Antenna_Connected")]Antenna_Connected = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_ConnectionAttemptStatusType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Failed_A_Reader_Initiated_Connection_Already_Exists")]Failed_A_Reader_Initiated_Connection_Already_Exists = 1,
    [XmlEnum(Name="Failed_A_Client_Initiated_Connection_Already_Exists")]Failed_A_Client_Initiated_Connection_Already_Exists = 2,
    [XmlEnum(Name="Failed_Reason_Other_Than_A_Connection_Already_Exists")]Failed_Reason_Other_Than_A_Connection_Already_Exists = 3,
    [XmlEnum(Name="Another_Connection_Attempted")]Another_Connection_Attempted = 4,
  }

    /// <summary>
    /// Status can be a success or one of the error conditions. This section lists a set of generic error conditions that, in combination with the identifier of the culprit field, conveys the error condition. The codes are broken into four scopes: message, parameter,  field and device. The device code indicates that the error is in the Reader device rather than the message, parameter or field.
    /// </summary>
    [Serializable]
    public enum ENUM_StatusCode
  {
    [XmlEnum(Name="M_Success")]M_Success = 0,
    [XmlEnum(Name="M_ParameterError")]M_ParameterError = 100,
    [XmlEnum(Name="M_FieldError")]M_FieldError = 101,
    [XmlEnum(Name="M_UnexpectedParameter")]M_UnexpectedParameter = 102,
    [XmlEnum(Name="M_MissingParameter")]M_MissingParameter = 103,
    [XmlEnum(Name="M_DuplicateParameter")]M_DuplicateParameter = 104,
    [XmlEnum(Name="M_OverflowParameter")]M_OverflowParameter = 105,
    [XmlEnum(Name="M_OverflowField")]M_OverflowField = 106,
    [XmlEnum(Name="M_UnknownParameter")]M_UnknownParameter = 107,
    [XmlEnum(Name="M_UnknownField")]M_UnknownField = 108,
    [XmlEnum(Name="M_UnsupportedMessage")]M_UnsupportedMessage = 109,
    [XmlEnum(Name="M_UnsupportedVersion")]M_UnsupportedVersion = 110,
    [XmlEnum(Name="M_UnsupportedParameter")]M_UnsupportedParameter = 111,
    [XmlEnum(Name="P_ParameterError")]P_ParameterError = 200,
    [XmlEnum(Name="P_FieldError")]P_FieldError = 201,
    [XmlEnum(Name="P_UnexpectedParameter")]P_UnexpectedParameter = 202,
    [XmlEnum(Name="P_MissingParameter")]P_MissingParameter = 203,
    [XmlEnum(Name="P_DuplicateParameter")]P_DuplicateParameter = 204,
    [XmlEnum(Name="P_OverflowParameter")]P_OverflowParameter = 205,
    [XmlEnum(Name="P_OverflowField")]P_OverflowField = 206,
    [XmlEnum(Name="P_UnknownParameter")]P_UnknownParameter = 207,
    [XmlEnum(Name="P_UnknownField")]P_UnknownField = 208,
    [XmlEnum(Name="P_UnsupportedParameter")]P_UnsupportedParameter = 209,
    [XmlEnum(Name="A_Invalid")]A_Invalid = 300,
    [XmlEnum(Name="A_OutOfRange")]A_OutOfRange = 301,
    [XmlEnum(Name="R_DeviceError")]R_DeviceError = 401,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2DRValue
  {
    [XmlEnum(Name="DRV_8")]DRV_8 = 0,
    [XmlEnum(Name="DRV_64_3")]DRV_64_3 = 1,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2MValue
  {
    [XmlEnum(Name="MV_FM0")]MV_FM0 = 0,
    [XmlEnum(Name="MV_2")]MV_2 = 1,
    [XmlEnum(Name="MV_4")]MV_4 = 2,
    [XmlEnum(Name="MV_8")]MV_8 = 3,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2ForwardLinkModulation
  {
    [XmlEnum(Name="PR_ASK")]PR_ASK = 0,
    [XmlEnum(Name="SSB_ASK")]SSB_ASK = 1,
    [XmlEnum(Name="DSB_ASK")]DSB_ASK = 2,
  }

    /// <summary>
    /// Description
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2SpectralMaskIndicator
  {
    [XmlEnum(Name="Unknown")]Unknown = 0,
    [XmlEnum(Name="SI")]SI = 1,
    [XmlEnum(Name="MI")]MI = 2,
    [XmlEnum(Name="DI")]DI = 3,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2TruncateAction
  {
    [XmlEnum(Name="Unspecified")]Unspecified = 0,
    [XmlEnum(Name="Do_Not_Truncate")]Do_Not_Truncate = 1,
    [XmlEnum(Name="Truncate")]Truncate = 2,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2StateAwareTarget
  {
    [XmlEnum(Name="SL")]SL = 0,
    [XmlEnum(Name="Inventoried_State_For_Session_S0")]Inventoried_State_For_Session_S0 = 1,
    [XmlEnum(Name="Inventoried_State_For_Session_S1")]Inventoried_State_For_Session_S1 = 2,
    [XmlEnum(Name="Inventoried_State_For_Session_S2")]Inventoried_State_For_Session_S2 = 3,
    [XmlEnum(Name="Inventoried_State_For_Session_S3")]Inventoried_State_For_Session_S3 = 4,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2StateAwareAction
  {
    [XmlEnum(Name="AssertSLOrA_DeassertSLOrB")]AssertSLOrA_DeassertSLOrB = 0,
    [XmlEnum(Name="AssertSLOrA_Noop")]AssertSLOrA_Noop = 1,
    [XmlEnum(Name="Noop_DeassertSLOrB")]Noop_DeassertSLOrB = 2,
    [XmlEnum(Name="NegateSLOrABBA_Noop")]NegateSLOrABBA_Noop = 3,
    [XmlEnum(Name="DeassertSLOrB_AssertSLOrA")]DeassertSLOrB_AssertSLOrA = 4,
    [XmlEnum(Name="DeassertSLOrB_Noop")]DeassertSLOrB_Noop = 5,
    [XmlEnum(Name="Noop_AssertSLOrA")]Noop_AssertSLOrA = 6,
    [XmlEnum(Name="Noop_NegateSLOrABBA")]Noop_NegateSLOrABBA = 7,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2StateUnawareAction
  {
    [XmlEnum(Name="Select_Unselect")]Select_Unselect = 0,
    [XmlEnum(Name="Select_DoNothing")]Select_DoNothing = 1,
    [XmlEnum(Name="DoNothing_Unselect")]DoNothing_Unselect = 2,
    [XmlEnum(Name="Unselect_DoNothing")]Unselect_DoNothing = 3,
    [XmlEnum(Name="Unselect_Select")]Unselect_Select = 4,
    [XmlEnum(Name="DoNothing_Select")]DoNothing_Select = 5,
  }

    /// <summary>
    /// Read_Write means lock for either reading or writing (depends on memory bank).
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2LockPrivilege
  {
    [XmlEnum(Name="Read_Write")]Read_Write = 0,
    [XmlEnum(Name="Perma_Lock")]Perma_Lock = 1,
    [XmlEnum(Name="Perma_Unlock")]Perma_Unlock = 2,
    [XmlEnum(Name="Unlock")]Unlock = 3,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2LockDataField
  {
    [XmlEnum(Name="Kill_Password")]Kill_Password = 0,
    [XmlEnum(Name="Access_Password")]Access_Password = 1,
    [XmlEnum(Name="EPC_Memory")]EPC_Memory = 2,
    [XmlEnum(Name="TID_Memory")]TID_Memory = 3,
    [XmlEnum(Name="User_Memory")]User_Memory = 4,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2ReadResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 1,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 2,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 3,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2WriteResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Tag_Memory_Overrun_Error")]Tag_Memory_Overrun_Error = 1,
    [XmlEnum(Name="Tag_Memory_Locked_Error")]Tag_Memory_Locked_Error = 2,
    [XmlEnum(Name="Insufficient_Power")]Insufficient_Power = 3,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 4,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 5,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 6,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2KillResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Zero_Kill_Password_Error")]Zero_Kill_Password_Error = 1,
    [XmlEnum(Name="Insufficient_Power")]Insufficient_Power = 2,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 3,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 4,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 5,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2LockResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Insufficient_Power")]Insufficient_Power = 1,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 2,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 3,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 4,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2BlockEraseResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Tag_Memory_Overrun_Error")]Tag_Memory_Overrun_Error = 1,
    [XmlEnum(Name="Tag_Memory_Locked_Error")]Tag_Memory_Locked_Error = 2,
    [XmlEnum(Name="Insufficient_Power")]Insufficient_Power = 3,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 4,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 5,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 6,
  }

    /// <summary>
    /// 
    /// </summary>
    [Serializable]
    public enum ENUM_C1G2BlockWriteResultType
  {
    [XmlEnum(Name="Success")]Success = 0,
    [XmlEnum(Name="Tag_Memory_Overrun_Error")]Tag_Memory_Overrun_Error = 1,
    [XmlEnum(Name="Tag_Memory_Locked_Error")]Tag_Memory_Locked_Error = 2,
    [XmlEnum(Name="Insufficient_Power")]Insufficient_Power = 3,
    [XmlEnum(Name="Nonspecific_Tag_Error")]Nonspecific_Tag_Error = 4,
    [XmlEnum(Name="No_Response_From_Tag")]No_Response_From_Tag = 5,
    [XmlEnum(Name="Nonspecific_Reader_Error")]Nonspecific_Reader_Error = 6,
  }

    

  [Serializable]
  public enum ENUM_LLRP_MSG_TYPE
  {
    CUSTOM_MESSAGE = 1023,
    GET_READER_CAPABILITIES = 1,
    GET_READER_CAPABILITIES_RESPONSE = 11,
    ADD_ROSPEC = 20,
    ADD_ROSPEC_RESPONSE = 30,
    DELETE_ROSPEC = 21,
    DELETE_ROSPEC_RESPONSE = 31,
    START_ROSPEC = 22,
    START_ROSPEC_RESPONSE = 32,
    STOP_ROSPEC = 23,
    STOP_ROSPEC_RESPONSE = 33,
    ENABLE_ROSPEC = 24,
    ENABLE_ROSPEC_RESPONSE = 34,
    DISABLE_ROSPEC = 25,
    DISABLE_ROSPEC_RESPONSE = 35,
    GET_ROSPECS = 26,
    GET_ROSPECS_RESPONSE = 36,
    ADD_ACCESSSPEC = 40,
    ADD_ACCESSSPEC_RESPONSE = 50,
    DELETE_ACCESSSPEC = 41,
    DELETE_ACCESSSPEC_RESPONSE = 51,
    ENABLE_ACCESSSPEC = 42,
    ENABLE_ACCESSSPEC_RESPONSE = 52,
    DISABLE_ACCESSSPEC = 43,
    DISABLE_ACCESSSPEC_RESPONSE = 53,
    GET_ACCESSSPECS = 44,
    GET_ACCESSSPECS_RESPONSE = 54,
    GET_READER_CONFIG = 2,
    GET_READER_CONFIG_RESPONSE = 12,
    SET_READER_CONFIG = 3,
    SET_READER_CONFIG_RESPONSE = 13,
    CLOSE_CONNECTION = 14,
    CLOSE_CONNECTION_RESPONSE = 4,
    GET_REPORT = 60,
    RO_ACCESS_REPORT = 61,
    KEEPALIVE = 62,
    KEEPALIVE_ACK = 72,
    READER_EVENT_NOTIFICATION = 63,
    ENABLE_EVENTS_AND_REPORTS = 64,
    ERROR_MESSAGE = 100,
    
  }

  [Serializable]
  public enum ENUM_LLRP_PARAM_TYPE
  {
    UTCTimestamp = 128,
    Uptime = 129,
    Custom = 1023,
    GeneralDeviceCapabilities = 137,
    ReceiveSensitivityTableEntry = 139,
    PerAntennaReceiveSensitivityRange = 149,
    PerAntennaAirProtocol = 140,
    GPIOCapabilities = 141,
    LLRPCapabilities = 142,
    RegulatoryCapabilities = 143,
    UHFBandCapabilities = 144,
    TransmitPowerLevelTableEntry = 145,
    FrequencyInformation = 146,
    FrequencyHopTable = 147,
    FixedFrequencyTable = 148,
    ROSpec = 177,
    ROBoundarySpec = 178,
    ROSpecStartTrigger = 179,
    PeriodicTriggerValue = 180,
    GPITriggerValue = 181,
    ROSpecStopTrigger = 182,
    AISpec = 183,
    AISpecStopTrigger = 184,
    TagObservationTrigger = 185,
    InventoryParameterSpec = 186,
    RFSurveySpec = 187,
    RFSurveySpecStopTrigger = 188,
    AccessSpec = 207,
    AccessSpecStopTrigger = 208,
    AccessCommand = 209,
    LLRPConfigurationStateValue = 217,
    Identification = 218,
    GPOWriteData = 219,
    KeepaliveSpec = 220,
    AntennaProperties = 221,
    AntennaConfiguration = 222,
    RFReceiver = 223,
    RFTransmitter = 224,
    GPIPortCurrentState = 225,
    EventsAndReports = 226,
    ROReportSpec = 237,
    TagReportContentSelector = 238,
    AccessReportSpec = 239,
    TagReportData = 240,
    EPCData = 241,
    EPC_96 = 13,
    ROSpecID = 9,
    SpecIndex = 14,
    InventoryParameterSpecID = 10,
    AntennaID = 1,
    PeakRSSI = 6,
    ChannelIndex = 7,
    FirstSeenTimestampUTC = 2,
    FirstSeenTimestampUptime = 3,
    LastSeenTimestampUTC = 4,
    LastSeenTimestampUptime = 5,
    TagSeenCount = 8,
    AccessSpecID = 16,
    RFSurveyReportData = 242,
    FrequencyRSSILevelEntry = 243,
    ReaderEventNotificationSpec = 244,
    EventNotificationState = 245,
    ReaderEventNotificationData = 246,
    HoppingEvent = 247,
    GPIEvent = 248,
    ROSpecEvent = 249,
    ReportBufferLevelWarningEvent = 250,
    ReportBufferOverflowErrorEvent = 251,
    ReaderExceptionEvent = 252,
    OpSpecID = 17,
    RFSurveyEvent = 253,
    AISpecEvent = 254,
    AntennaEvent = 255,
    ConnectionAttemptEvent = 256,
    ConnectionCloseEvent = 257,
    LLRPStatus = 287,
    FieldError = 288,
    ParameterError = 289,
    C1G2LLRPCapabilities = 327,
    C1G2UHFRFModeTable = 328,
    C1G2UHFRFModeTableEntry = 329,
    C1G2InventoryCommand = 330,
    C1G2Filter = 331,
    C1G2TagInventoryMask = 332,
    C1G2TagInventoryStateAwareFilterAction = 333,
    C1G2TagInventoryStateUnawareFilterAction = 334,
    C1G2RFControl = 335,
    C1G2SingulationControl = 336,
    C1G2TagInventoryStateAwareSingulationAction = 337,
    C1G2TagSpec = 338,
    C1G2TargetTag = 339,
    C1G2Read = 341,
    C1G2Write = 342,
    C1G2Kill = 343,
    C1G2Lock = 344,
    C1G2LockPayload = 345,
    C1G2BlockErase = 346,
    C1G2BlockWrite = 347,
    C1G2EPCMemorySelector = 348,
    C1G2_PC = 12,
    C1G2_CRC = 11,
    C1G2SingulationDetails = 18,
    C1G2ReadOpSpecResult = 349,
    C1G2WriteOpSpecResult = 350,
    C1G2KillOpSpecResult = 351,
    C1G2LockOpSpecResult = 352,
    C1G2BlockEraseOpSpecResult = 353,
    C1G2BlockWriteOpSpecResult = 354,
    
  }
}
